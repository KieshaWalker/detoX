# Generated by Django 5.2.7 on 2025-10-23 20:08

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('X_app', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('text', models.TextField(max_length=1000)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_hidden', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='X_app.comment')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Hashtag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Hashtag name without # (e.g., 'travel')", max_length=100, unique=True)),
                ('posts_count', models.PositiveIntegerField(default=0)),
                ('last_used', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-posts_count', 'name'],
            },
        ),
        migrations.CreateModel(
            name='InvitationCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('used', models.BooleanField(default=False)),
                ('invited_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sent_invitations', to=settings.AUTH_USER_MODEL)),
                ('used_by', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='InviteList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('invited_at', models.DateTimeField(auto_now_add=True)),
                ('invite_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invite_lists', to='X_app.invitationcode')),
                ('inviter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invite_lists', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('caption', models.TextField(blank=True, help_text='Post caption/description', max_length=2200)),
                ('image', models.ImageField(blank=True, help_text='Main post image', null=True, upload_to='posts/images/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'gif', 'webp'])])),
                ('video', models.FileField(blank=True, help_text='Post video (for TikTok-style content)', null=True, upload_to='posts/videos/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['mp4', 'mov', 'avi', 'webm'])])),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('privacy', models.CharField(choices=[('public', 'Public'), ('friends', 'Friends Only'), ('private', 'Private')], default='public', max_length=10)),
                ('location', models.CharField(blank=True, help_text='Location tag for the post', max_length=255)),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('comments_count', models.PositiveIntegerField(default=0)),
                ('shares_count', models.PositiveIntegerField(default=0)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('hashtags', models.TextField(blank=True, help_text="Comma-separated hashtags (e.g., 'travel,photography,nature')")),
                ('is_featured', models.BooleanField(default=False, help_text='Mark as featured content')),
                ('is_archived', models.BooleanField(default=False, help_text='Soft delete - hide from public view but keep data')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('media_file', models.FileField(upload_to='posts/media/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'gif', 'webp', 'mp4', 'mov', 'avi', 'webm'])])),
                ('media_type', models.CharField(choices=[('image', 'Image'), ('video', 'Video')], default='image', max_length=10)),
                ('order', models.PositiveIntegerField(default=0, help_text='Order of media in carousel')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='additional_media', to='X_app.post')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='PostView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewed_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('duration_seconds', models.PositiveIntegerField(default=0, help_text='How long the user viewed the post')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='X_app.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_views', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-viewed_at'],
            },
        ),
        migrations.CreateModel(
            name='QuestionnaireResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=200)),
                ('last_name', models.CharField(max_length=200)),
                ('username', models.CharField(max_length=150, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('motivation_help_others', models.CharField(choices=[('personal_growth', 'Personal growth and self-actualization'), ('helping_others', 'Helping others and making a difference'), ('financial_security', 'Achieving financial security'), ('social_status', 'Gaining social status and recognition')], max_length=100)),
                ('human_nature_view', models.CharField(choices=[('unpredictable', 'People are unpredictable and complex'), ('environment', 'People are shaped by their environment'), ('inherently_good', 'People are inherently good'), ('self_interested', 'People are self-interested by nature')], max_length=100)),
                ('fairness_belief', models.CharField(choices=[('equal_outcomes', 'Fairness means equal outcomes for everyone'), ('equal_opportunities', 'Fairness means equal opportunities for everyone'), ('subjective', 'Fairness is subjective and context-dependent'), ('effort_merit', 'Fairness depends on effort and merit')], max_length=100)),
                ('long_term_goals', models.CharField(choices=[('security', 'Security and stability'), ('recognition', 'Recognition and status'), ('achievement', 'Need for personal achievement'), ('positive_impact', 'Desire to make a positive impact')], max_length=100)),
                ('response_personal_struggle', models.CharField(choices=[('emotional_support', 'I listen actively and offer emotional support'), ('practical_solutions', 'I try to provide practical solutions or advice'), ('share_experiences', "I share similar experiences I've had"), ('uncomfortable', 'I feel uncomfortable and change the subject')], max_length=100)),
                ('response_unfair_treatment', models.CharField(choices=[('speak_up', "Speak up immediately, even if it's uncomfortable"), ('assess_situation', 'Assess the situation and choose the right moment to intervene'), ('private_support', 'Support the person privately after the incident'), ('own_responsibilities', 'Focus on my own responsibilities and avoid involvement')], max_length=100)),
                ('success_definition', models.CharField(choices=[('financial_security', 'Achieving financial security and material comfort'), ('relationships', 'Building meaningful relationships and connections'), ('positive_impact', 'Making a positive impact on others and society'), ('personal_growth', 'Personal growth and self-actualization')], max_length=100)),
                ('forgiveness_role', models.CharField(choices=[('forgive_easily', "I forgive easily and don't hold grudges"), ('takes_time', 'I forgive but it takes time and effort'), ('difficult', 'I find it difficult to forgive serious betrayals'), ('situational', "Forgiveness depends on the situation and the person's remorse")], max_length=100)),
                ('coping_failure', models.CharField(choices=[('analyze_learn', 'I analyze what went wrong and learn from it'), ('seek_support', 'I seek support from friends or family'), ('process_emotions', 'I give myself time to process emotions'), ('dwell', 'I tend to dwell on it and find it hard to move forward')], max_length=100)),
                ('learning_cultures', models.CharField(choices=[('actively_curios', "I'm actively curious and seek out diverse experiences"), ('opportunities', 'I learn when opportunities present themselves'), ('stick_known', 'I prefer to stick to what I know and understand'), ('challenging', 'I find it challenging but recognize its importance')], max_length=100)),
                ('empathy_definition', models.CharField(choices=[('understanding', 'Understanding and sharing the feelings of others'), ('compassion', 'Feeling compassion and wanting to help'), ('perspective_taking', "Seeing things from another's perspective"), ('emotional_resonance', 'Feeling a deep emotional connection with others')], max_length=100)),
                ('values_conflict', models.CharField(choices=[('open_dialogue', 'I engage in open dialogue to understand different perspectives'), ('avoid_conflict', 'I avoid conflict and try to keep the peace'), ('assertive', 'I assert my values while respecting others'), ('flexible', 'I adapt my values based on the situation')], max_length=200)),
                ('help_motivation', models.CharField(choices=[('intrinsic', 'I help others because it feels intrinsically rewarding'), ('extrinsic', 'I help others to gain recognition or rewards'), ('social', 'I help others to strengthen social bonds'), ('obligation', 'I help others out of a sense of duty')], max_length=200)),
                ('home_concept', models.CharField(blank=True, choices=[('physical_place', 'A physical place where I live'), ('belonging_security', 'A feeling of belonging and security'), ('loved_ones', 'Where my loved ones are located'), ('state_of_mind', 'A state of mind rather than a location')], max_length=100)),
                ('uncertainty_response', models.CharField(blank=True, choices=[('gather_info', 'I gather information and make a plan'), ('seek_advice', 'I seek advice from trusted people'), ('feel_anxious', 'I feel anxious and prefer to avoid it'), ('embrace_growth', 'I embrace it as an opportunity for growth')], max_length=100)),
                ('gratitude_role', models.CharField(blank=True, choices=[('regularly_express', 'I regularly express thanks for what I have'), ('notice_positive', "I notice positive aspects but don't always express it"), ('focus_lacking', "I focus more on what's lacking than what's present"), ('maintain_perspective', 'Gratitude helps me maintain perspective during challenges')], max_length=100)),
                ('feedback_approach', models.CharField(blank=True, choices=[('give_constructive', 'I give constructive feedback thoughtfully'), ('receive_openly', 'I receive feedback openly and use it for growth'), ('giving_difficult', 'I find giving feedback difficult'), ('receiving_challenging', 'I find receiving feedback challenging')], max_length=100)),
                ('life_balance', models.CharField(blank=True, choices=[('equal_time', 'Equal time spent on work, relationships, and self-care'), ('harmony', 'Harmony between different aspects of life'), ('juggle_responsibilities', 'The ability to juggle multiple responsibilities'), ('know_priorities', 'Knowing when to prioritize different areas')], max_length=100)),
                ('trust_definition', models.CharField(blank=True, choices=[('reliability', 'Reliability and keeping promises'), ('emotional_safety', 'Emotional safety and vulnerability'), ('shared_values', 'Shared values and mutual respect'), ('time_consistency', 'Time and consistency in actions')], max_length=100)),
                ('struggling_thoughts', models.CharField(blank=True, choices=[('want_to_help', '"I want to help them through this"'), ('learn_experience', '"I wonder what I can learn from their experience"'), ('feel_grateful', '"I feel grateful that I\'m not in their situation"'), ('feel_overwhelmed', '"I feel overwhelmed and unsure how to help"')], max_length=100)),
                ('difficult_conversations', models.CharField(blank=True, choices=[('prepare_carefully', 'I prepare thoroughly and choose words carefully'), ('speak_from_heart', 'I speak from the heart and express emotions'), ('avoid_when_possible', 'I avoid them when possible'), ('address_directly', 'I address issues directly and honestly')], max_length=100)),
                ('life_meaning', models.CharField(blank=True, choices=[('career_success', 'Career achievements and professional success'), ('relationships', 'Relationships and connections with others'), ('personal_growth', 'Personal growth and self-discovery'), ('contribute_larger', 'Contributing to something larger than myself')], max_length=100)),
                ('change_response', models.CharField(blank=True, choices=[('embrace_opportunity', 'I embrace it as an opportunity for new experiences'), ('adapt_gradually', 'I adapt gradually and give myself time'), ('resist_stability', 'I resist it and prefer stability'), ('reinvent_myself', 'I see it as a chance to reinvent myself')], max_length=100)),
                ('emotion_processing', models.CharField(blank=True, choices=[('talk_trusted', 'I talk about them with trusted people'), ('write_journal', 'I write or journal about my feelings'), ('physical_activity', 'I engage in physical activity or hobbies'), ('suppress_later', 'I suppress them until I can deal with them later')], max_length=100)),
                ('boundaries_approach', models.CharField(blank=True, choices=[('clearly_communicate', 'I clearly communicate my limits and needs'), ('difficult_important', "I find it difficult but know it's important"), ('prioritize_others', "I tend to prioritize others' needs over mine"), ('set_feel_guilty', 'I set boundaries but feel guilty about it')], max_length=100)),
                ('vulnerability_strength', models.CharField(blank=True, choices=[('sign_true_strength', 'Vulnerability is a sign of true strength'), ('never_show', 'Strength means never showing vulnerability'), ('can_coexist', 'They can coexist - being strong includes being vulnerable'), ('makes_weak', "Vulnerability makes you weak in others' eyes")], max_length=100)),
                ('self_reflection_frequency', models.CharField(blank=True, choices=[('daily', "Daily - it's a regular practice for me"), ('weekly', 'Weekly - when I have time to think deeply'), ('occasionally', 'Occasionally - during significant life events'), ('rarely', 'Rarely - I prefer to stay busy and active'), ('never', "Never - I don't see the value in it")], max_length=100)),
                ('change_mind_frequency', models.CharField(blank=True, choices=[('frequently', "Frequently - I'm open to new information"), ('sometimes', 'Sometimes - when presented with compelling evidence'), ('rarely', 'Rarely - I tend to stick to my initial decisions'), ('never', "Never - once I decide, that's it")], max_length=100)),
                ('admit_fault_frequency', models.CharField(blank=True, choices=[('always', 'Always - accountability is important to me'), ('often', "Often - when I'm clearly in the wrong"), ('sometimes', 'Sometimes - depends on the situation'), ('rarely', 'Rarely - I find it difficult to admit mistakes'), ('never', 'Never - I prefer to avoid confrontation')], max_length=100)),
                ('active_listening_definition', models.CharField(blank=True, choices=[('focus_speaker', 'Fully focusing on the speaker without distractions'), ('understand_words_emotions', 'Understanding both words and emotions being conveyed'), ('ask_questions', 'Asking clarifying questions to ensure comprehension'), ('remember_details', 'Remembering details for future reference'), ('all_above', 'All of the above')], max_length=100)),
                ('human_being_definition', models.CharField(blank=True, choices=[('imperfect_learning', 'Being imperfect and learning from mistakes'), ('connect_emotionally', 'Connecting with others on an emotional level'), ('experience_emotions', 'Experiencing the full range of emotions'), ('seek_meaning', 'Seeking meaning and purpose in life'), ('all_above_human', 'All of the above')], max_length=100)),
                ('self_love_level', models.CharField(blank=True, choices=[('completely_unconditionally', 'Yes, completely and unconditionally'), ('working_on_it', "Yes, but I'm still working on it"), ('sometimes', 'Sometimes, it depends on the day'), ('struggle', 'No, I struggle with self-acceptance'), ('not_sure', "I'm not sure what that means")], max_length=100)),
                ('true_happiness_knowledge', models.CharField(blank=True, choices=[('content_peace', 'I feel content and at peace with my life'), ('joy_everyday', 'I experience joy in everyday moments'), ('purpose_fulfillment', 'I have a sense of purpose and fulfillment'), ('express_gratitude', 'I can express gratitude for what I have'), ('all_above_happy', 'All of the above')], max_length=100)),
                ('emotional_intelligence_definition', models.CharField(blank=True, choices=[('aware_emotions', "Being aware of your own emotions and others'"), ('manage_effectively', 'Managing emotions effectively in difficult situations'), ('understand_dynamics', 'Understanding social dynamics and relationships'), ('guide_decisions', 'Using emotions to guide decision-making'), ('all_above_ei', 'All of the above')], max_length=100)),
                ('personal_growth_definition', models.CharField(blank=True, choices=[('learn_skills', 'Learning new skills and knowledge'), ('emotional_maturity', 'Developing emotional maturity'), ('better_relationships', 'Building better relationships'), ('overcome_challenges', 'Overcoming personal challenges'), ('continuous_improvement', 'Continuous self-improvement in all areas')], max_length=100)),
                ('most_authentic_feeling', models.CharField(blank=True, choices=[('when_alone', "When I'm alone and can be myself"), ('with_close_ones', "When I'm with close friends or family"), ('pursuing_passions', "When I'm pursuing my passions"), ('helping_others', "When I'm helping others"), ('being_creative', "When I'm being creative or expressive")], max_length=100)),
                ('stranger_interaction_motivation', models.CharField(blank=True, choices=[('right_thing', "It's the right thing to do"), ('inherent_worth', 'I believe in the inherent worth of all people'), ('positive_effects', 'Kindness creates positive ripple effects'), ('feel_good', 'It makes me feel good about myself'), ('all_above_stranger', 'All of the above')], max_length=100)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('invitation_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='X_app.invitationcode')),
            ],
        ),
        migrations.CreateModel(
            name='UserCompatibility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compatibility_score', models.DecimalField(decimal_places=2, help_text='Compatibility score 0-100', max_digits=5)),
                ('calculated_at', models.DateTimeField(auto_now=True)),
                ('shared_empathy', models.BooleanField(default=False)),
                ('shared_growth', models.BooleanField(default=False)),
                ('shared_relationships', models.BooleanField(default=False)),
                ('shared_values', models.BooleanField(default=False)),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compatibility_user1', to=settings.AUTH_USER_MODEL)),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compatibility_user2', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('first_name', models.CharField(blank=True, max_length=200)),
                ('last_name', models.CharField(blank=True, max_length=200)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('invitation_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='X_app.invitationcode')),
                ('questionnaire', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='X_app.questionnaireresponse')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.DeleteModel(
            name='User',
        ),
        migrations.AddField(
            model_name='like',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='X_app.post'),
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='X_app.post'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['author', '-created_at'], name='X_app_post_author__baebe8_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['privacy', '-created_at'], name='X_app_post_privacy_272ace_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['is_featured', '-created_at'], name='X_app_post_is_feat_6a1a3f_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['-likes_count'], name='X_app_post_likes_c_f88b98_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['-views_count'], name='X_app_post_views_c_c665a1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='like',
            unique_together={('user', 'post')},
        ),
        migrations.AlterUniqueTogether(
            name='postmedia',
            unique_together={('post', 'order')},
        ),
        migrations.AlterUniqueTogether(
            name='postview',
            unique_together={('user', 'post')},
        ),
        migrations.AddIndex(
            model_name='usercompatibility',
            index=models.Index(fields=['compatibility_score'], name='X_app_userc_compati_6017ff_idx'),
        ),
        migrations.AddIndex(
            model_name='usercompatibility',
            index=models.Index(fields=['calculated_at'], name='X_app_userc_calcula_c52a12_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usercompatibility',
            unique_together={('user1', 'user2')},
        ),
    ]
